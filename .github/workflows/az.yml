name: Build Android APK (Tauri 2.x)

on:
  push:
    branches: [ "main" ]
  workflow_dispatch:

jobs:
  build-android:
    runs-on: ubuntu-latest

    steps:
      # 1. 检出代码并确保目录存在
      - name: Checkout code
        uses: actions/checkout@v4

      # 2. 创建完整的目录结构
      - name: Create directory structure
        run: |
          mkdir -p Genshin-Impact-Wish-Simulator/src-tauri
          mkdir -p Genshin-Impact-Wish-Simulator/dist

      # 3. 设置 Node.js 环境
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      # 4. 安装 Tauri CLI（精确版本）
      - name: Install Tauri CLI
        run: npm install -g @tauri-apps/cli@2.0.0-beta.22

      # 5. 生成最小化配置（带完整路径验证）
      - name: Create config with validation
        run: |
          CONFIG_PATH="Genshin-Impact-Wish-Simulator/src-tauri/tauri.conf.json"
          
          # 生成配置
          echo '{
            "identifier": "com.example.genshinimpact",
            "productName": "genshin-impact",
            "version": "0.1.0"
          }' > $CONFIG_PATH

          # 验证路径
          echo "当前工作目录: $(pwd)"
          echo "配置文件路径: $CONFIG_PATH"
          ls -la Genshin-Impact-Wish-Simulator/src-tauri/

      # 6. 初始化 Android 项目（带路径检查）
      - name: Init Android
        run: |
          cd Genshin-Impact-Wish-Simulator || { echo "目录不存在！"; exit 1; }
          echo "当前目录: $(pwd)"
          ls -la
          tauri android init --ci

      # 7. 构建 APK
      - name: Build APK
        run: |
          cd Genshin-Impact-Wish-Simulator
          tauri android build --debug

      # 8. 上传产物
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: genshin-impact-apk
          path: Genshin-Impact-Wish-Simulator/src-tauri/target/android/debug/*.apk